trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - CHANGELOG.md
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: GitVersion@5
            name: gitVersion
            displayName: 'Evaluate Next Version'
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'

          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(gitVersion.NuGetVersionV2)

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifact'
            inputs:
              pathToPublish: 'output/'
              artifactName: 'output'
              publishLocation: 'Container'

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit_2013
        displayName: 'Unit OWA 2013'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - powershell: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'

              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test for OWA 2013'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/Tests/Unit'; Parameters = @{WACCmdletModule = '$(Build.SourcesDirectory)/Tests/Unit/Stubs/15.0.4569.1506/OfficeWebApps.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'Unit (Windows Server Core)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish CodeCoverage Artifact'
            inputs:
              pathToPublish: '$(Build.SourcesDirectory)/output/testResults'
              artifactName: 'CodeCoverage_2013'
              publishLocation: 'Container'
          # - task: PublishCodeCoverageResults@1
          #   displayName: 'Publish Code Coverage'
          #   condition: succeededOrFailed()
          #   inputs:
          #     codeCoverageTool: 'JaCoCo'
          #     summaryFileLocation: 'output/testResults/CodeCov*.xml'
          #     pathToSources: '$(Build.SourcesDirectory)/output/$(dscBuildVariable.RepositoryName)'

      - job: Test_Unit_2016
        displayName: 'Unit OOS 2016'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - powershell: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'

              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test for OOS 2016'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/Tests/Unit'; Parameters = @{WACCmdletModule = '$(Build.SourcesDirectory)/Tests/Unit/Stubs/16.0.6814.2226/OfficeWebApps.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'Unit (Windows Server Core)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish CodeCoverage Artifact'
            inputs:
              pathToPublish: '$(Build.SourcesDirectory)/output/testResults'
              artifactName: 'CodeCoverage_2016'
              publishLocation: 'Container'
          # - task: PublishCodeCoverageResults@1
          #   displayName: 'Publish Code Coverage'
          #   condition: succeededOrFailed()
          #   inputs:
          #     codeCoverageTool: 'JaCoCo'
          #     summaryFileLocation: 'output/testResults/CodeCov*.xml'
          #     pathToSources: '$(Build.SourcesDirectory)/output/$(dscBuildVariable.RepositoryName)'

      - job: MergeCodeCoverage
        dependsOn:
        - 'Test_Unit_2013'
        - 'Test_Unit_2016'
        displayName: 'Merge Code Coverage'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - powershell: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'

              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'

          # - task: DownloadBuildArtifacts@0
          #   displayName: 'Download Build Artifact'
          #   inputs:
          #     buildType: 'current'
          #     downloadType: 'specific'
          #     downloadPath: '$(Build.SourcesDirectory)'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'CodeCoverage_2013'
              downloadPath: '$(Build.SourcesDirectory)/output'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'CodeCoverage_2016'
              downloadPath: '$(Build.SourcesDirectory)/output'

          - task: PowerShell@2
            name: troubleshoot
            displayName: 'Troubleshooting'
            inputs:
              targetType: 'inline'
              script: 'Get-ChildItem $(Build.SourcesDirectory)/output/CodeCov*.xml -Recurse'
              pwsh: false

          - task: PowerShell@2
            name: merge
            displayName: 'Merge Code Coverage files'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks merge"
              pwsh: false

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/CodeCov_Merged.xml'
              pathToSources: '$(Build.SourcesDirectory)/output/$(dscBuildVariable.RepositoryName)'

  - stage: Deploy
    dependsOn: Test
    # Only execute deploy stage if we're on master and previous stage succeeded
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)

